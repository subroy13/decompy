<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="29" time="0.804" timestamp="2024-03-09T22:42:50.295074" hostname="subroy13PC"><testcase classname="tests.test_interfaces.TestSVDResultInterface" name="test_singular_values_as_matrix" time="0.003" /><testcase classname="tests.test_interfaces.TestSVDResultInterface" name="test_singular_values_as_array" time="0.001" /><testcase classname="tests.test_interfaces.TestSVDResultInterface" name="test_singular_vectors_left" time="0.001" /><testcase classname="tests.test_interfaces.TestSVDResultInterface" name="test_singular_vectors_right" time="0.002" /><testcase classname="tests.test_interfaces.TestSVDResultInterface" name="test_singular_vectors_both" time="0.001" /><testcase classname="tests.test_interfaces.TestSVDResultInterface" name="test_convergence_metrics" time="0.002" /><testcase classname="tests.test_interfaces.TestSVDResultInterface" name="test_cumulative_variance_identity" time="0.001" /><testcase classname="tests.test_interfaces.TestSVDResultInterface" name="test_cumulative_variance_proportion" time="0.002" /><testcase classname="tests.test_interfaces.TestSVDResultInterface" name="test_estimated_rank" time="0.002" /><testcase classname="tests.test_interfaces.TestPCAResultInterface" name="test_location" time="0.002" /><testcase classname="tests.test_interfaces.TestPCAResultInterface" name="test_eigen_values_as_matrix" time="0.002" /><testcase classname="tests.test_interfaces.TestPCAResultInterface" name="test_eigen_values_as_array" time="0.001" /><testcase classname="tests.test_interfaces.TestPCAResultInterface" name="test_eigen_vectors" time="0.001" /><testcase classname="tests.test_interfaces.TestPCAResultInterface" name="test_convergence_metrics" time="0.001" /><testcase classname="tests.test_interfaces.TestPCAResultInterface" name="test_cumulative_variance_identity" time="0.001" /><testcase classname="tests.test_interfaces.TestPCAResultInterface" name="test_cumulative_variance_proportion" time="0.003" /><testcase classname="tests.test_interfaces.TestPCAResultInterface" name="test_estimated_rank" time="0.003" /><testcase classname="tests.test_interfaces.TestLSNResultInterface" name="test_singular_values_as_matrix" time="0.002" /><testcase classname="tests.test_interfaces.TestLSNResultInterface" name="test_singular_values_as_array" time="0.001" /><testcase classname="tests.test_interfaces.TestLSNResultInterface" name="test_singular_vectors_left" time="0.001" /><testcase classname="tests.test_interfaces.TestLSNResultInterface" name="test_singular_vectors_right" time="0.002" /><testcase classname="tests.test_interfaces.TestLSNResultInterface" name="test_singular_vectors_both" time="0.003" /><testcase classname="tests.test_interfaces.TestLSNResultInterface" name="test_convergence_metrics" time="0.001" /><testcase classname="tests.test_interfaces.TestLSNResultInterface" name="test_cumulative_variance_identity" time="0.001" /><testcase classname="tests.test_interfaces.TestLSNResultInterface" name="test_cumulative_variance_proportion" time="0.001" /><testcase classname="tests.test_interfaces.TestLSNResultInterface" name="test_estimated_rank" time="0.001" /><testcase classname="tests.test_matrix_factorization.TestMatrixFactorization" name="test_adm" time="0.003" /><testcase classname="tests.test_matrix_factorization.TestMatrixFactorization" name="test_alm" time="0.002"><failure message="ValueError: attempt to get argmax of an empty sequence">self = &lt;tests.test_matrix_factorization.TestMatrixFactorization object at 0x00000222A325D240&gt;
sample_matrix = array([[ 0.,  1.,  2.,  3.],
       [ 4.,  5.,  6.,  7.],
       [ 8.,  9., 10., 11.],
       [12., 13., 14., 15.],
       [16., 17., 18., 19.]])

    def test_alm(self, sample_matrix):
        X = sample_matrix
        n, p = X.shape
        mod = AugmentedLagrangianMethod()
&gt;       res = mod.decompose(X)

tests\test_matrix_factorization.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\decompy\matrix_factorization\alm.py:131: in decompose
    max_idx = np.argmax(ratio)
C:\Users\roysu\AppData\Roaming\Python\Python310\site-packages\numpy\core\fromnumeric.py:1229: in argmax
    return _wrapfunc(a, 'argmax', axis=axis, out=out, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

obj = array([], dtype=float64), method = 'argmax', args = (), kwds = {'axis': None, 'out': None}
bound = &lt;built-in method argmax of numpy.ndarray object at 0x00000222A32566D0&gt;

    def _wrapfunc(obj, method, *args, **kwds):
        bound = getattr(obj, method, None)
        if bound is None:
            return _wrapit(obj, method, *args, **kwds)
    
        try:
&gt;           return bound(*args, **kwds)
E           ValueError: attempt to get argmax of an empty sequence

C:\Users\roysu\AppData\Roaming\Python\Python310\site-packages\numpy\core\fromnumeric.py:59: ValueError</failure></testcase><testcase classname="tests.test_matrix_factorization.TestMatrixFactorization" name="test_rsvddpd" time="0.008" /></testsuite></testsuites>